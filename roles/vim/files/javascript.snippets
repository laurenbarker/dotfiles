
snippet me "module.exports" b
module.exports = $1;
endsnippet

snippet constr "constructor" b
constructor() {
	super();
	$0
}
endsnippet

# React stuff

snippet ss "setState" b
this.setState({ $1 });
endsnippet

snippet ir "Import React"
import React from "react";
endsnippet

snippet ipt "Import prop-types"
import t from "prop-types";
endsnippet

snippet rfc "React Functional Component" b
const ${1:`!v expand('%:t:r')`} = (${2:{...props}}) => {
	return (
		<div>
			$3
		</div>
	);
}
$1.defaultProps = {
};
$1.propTypes = {
};
endsnippet

snippet rfc! "React Functional Component (with imports)" b
import React from "react";
import t from "prop-types";

const ${1:`!v expand('%:t:r')`} = (${2:{...props}}) => {
	return (
		<div>
			$3
		</div>
	);
}
$1.defaultProps = {
};
$1.propTypes = {
};

export default $1;
endsnippet

snippet rccc "createClass" b
export const ${1:`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} = React.createClass({
	render() {
		return (
			$0
		);
	}
});
endsnippet

snippet rcc "React.Component" b
export default class ${1:`!p snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} extends React.Component {
	render() {
		return (
			$0
		);
	}
}
endsnippet

snippet importreact "import React" b
import React from 'react';
import PropTypes as PT from 'prop-types';
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
	$0
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwm "componentWillMount" b
componentWillMount() {
	$0
}
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
	$0
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
	$0
}
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet gdp "getDefaultProps" b
getDefaultProps() {
	return {
		$0
	};
}
endsnippet

snippet gis "getInitialState" b
getInitialState() {
	return {
		$0
	};
}
endsnippet

snippet pt "propTypes" b
static propTypes = {
	$0
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
	return ${1:true};
}
endsnippet

# Mocha testing
snippet desc
describe('${1:feature}', () => {
	${2}
});
endsnippet

snippet descf
describe('${1:feature}', function() {
	${2}
});
endsnippet

snippet it
it('${1:should do something}', () => {
	${2}
});
endsnippet

snippet itd
it('${1:should do something}', (done) => {
	${2}
	done();
});
endsnippet

snippet itf
it('${1:should do something}', function(done) {
	${2}
	done()
});
endsnippet

snippet bef
before(() => {
	${1}
});
endsnippet

snippet beff
before(function() {
	${1}
});
endsnippet

snippet af
after(() => {
	${1}
});
endsnippet

snippet aff
after(function() {
	${1}
});
endsnippet

snippet befe
beforeEach(() => {
	${1}
});
endsnippet

snippet befef
beforeEach(function() {
	${1}
});
endsnippet

snippet afe
afterEach(() => {
	${1}
});
endsnippet

snippet afef
afterEach(function() {
	${1}
});
endsnippet

# Chai assertions

snippet aok
assert.ok(${1});
endsnippet

snippet a==
assert.equal(${1}, ${2});
endsnippet

snippet a!=
assert.notEqual(${1}, ${2});
endsnippet

snippet a===
assert.strictEqual(${1}, ${2});
endsnippet

snippet a!==
assert.notStrictEqual(${1}, ${2});
endsnippet

snippet ad=
assert.deepEqual(${1}, ${2});
endsnippet

snippet a!d=
assert.notDeepEqual(${1}, ${2});
endsnippet

snippet atrue
assert.isTrue(${1});
endsnippet

snippet atrue
assert.isFalse(${1});
endsnippet

snippet atype
assert.typeOf(${1:obj}, '${2:type}');
endsnippet

snippet aio
assert.instanceOf(${1:obj}, ${2:type});
endsnippet

# Chai-sinon

snippet acalled
assert.called(${1:spy});
endsnippet

snippet acalledw
assert.calledWith(${1:spy}, ${2:args});
endsnippet

snippet acalledo
assert.calledOnce(${1:spy});
endsnippet

snippet spy
var ${1:spy} = new sinon.spy(${2:obj}, '${3:method}');
endsnippet

snippet testboiler
/*global describe, it, expect, example, before, after, beforeEach, afterEach, mocha, sinon*/
'use strict';
var assert = require('chai').assert;

describe('${1:feature}', () => {
	${2}
});
endsnippet

